class Solution {
    /**
     * @param A: An integer array.
     * @param B: An integer array.
     * @return: a double whose format is *.5 or *.0
     */
// public double findMedianSortedArrays(int[] A, int[] B) {
// 	    int m = A.length, n = B.length;
// 	    int l = (m + n + 1) / 2;
// 	    int r = (m + n + 2) / 2;
// 	    return (getkth(A, 0, B, 0, l) + getkth(A, 0, B, 0, r)) / 2.0;
// 	}

// public double getkth(int[] A, int aStart, int[] B, int bStart, int k) {
// 	if (aStart > A.length - 1) return B[bStart + k - 1];            
// 	if (bStart > B.length - 1) return A[aStart + k - 1];                
// 	if (k == 1) return Math.min(A[aStart], B[bStart]);
	
// 	int aMid = Integer.MAX_VALUE, bMid = Integer.MAX_VALUE;
// 	if (aStart + k/2 - 1 < A.length) aMid = A[aStart + k/2 - 1]; 
// 	if (bStart + k/2 - 1 < B.length) bMid = B[bStart + k/2 - 1];        
	
// 	if (aMid < bMid) 
// 	    return getkth(A, aStart + k/2, B, bStart,       k - k/2);// Check: aRight + bLeft 
// 	else 
// 		return getkth(A, aStart,       B, bStart + k/2, k - k/2);// Check: bRight + aLeft
// }

public static int findKthSmallest(int[] a, int m, int begin1, int[] b, int n, int begin2, int k) {

	if (m > n)
		return findKthSmallest(b, n, begin2, a, m, begin1, k);
	if (m == 0)
		return b[begin2 + k - 1];
	if (k == 1)
		return Integer.min(a[begin1], b[begin2]);
	int partA = Integer.min(k / 2, m), partB = k - partA;
	if (a[begin1 + partA - 1] == b[begin2 + partB - 1])
		return a[begin1 + partA - 1];
	else if (a[begin1 + partA - 1] > b[begin2 + partB - 1])
		return findKthSmallest(a, m, begin1, b, n - partB, begin2 + partB, k - partB);
	else
		return findKthSmallest(a, m - partA, begin1 + partA, b, n, begin2, k - partA);

}

public static double findMedianSortedArrays(int[] nums1, int[] nums2) {
	int len1 = nums1.length, len2 = nums2.length, sumLen = len1 + len2;
	if (sumLen % 2 != 0) {

		return findKthSmallest(nums1, len1, 0, nums2, len2, 0, sumLen / 2 + 1);
	} else {
		return (findKthSmallest(nums1, len1, 0, nums2, len2, 0, sumLen / 2)
				+ findKthSmallest(nums1, len1, 0, nums2, len2, 0, sumLen / 2 + 1)) / 2.0;
	}


}
}
