public class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if (nums == null || k <= 0){
            return new int[0];
        }
        int n = nums.length;
        // res contains the max; idx is the index
        int[] res = new int[n - k + 1];
        int idx = 0;
        // deque q contains index in array nums
        Deque<Integer> q = new ArrayDeque<Integer>();
        for (int i = 0; i < n; i++){
            // remove smaller numbers which is not in k range
            while (!q.isEmpty() && q.peek() < i - k + 1){
                q.poll();
            }
            // remove smaller element from last, so the head one is always is bigger one
            while (!q.isEmpty() && nums[q.peekLast()] < nums[i]){
                q.pollLast();
            }
            q.offer(i);
            if (i >= k - 1){
                res[idx++] = nums[q.peek()];
            }
            
        }
        return res;
    }
}
