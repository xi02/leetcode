public class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> tempList = new ArrayList<>();
        Arrays.sort(candidates);
        backtrack(result, tempList, candidates, target, 0);
        return result;
    }
    public void backtrack(List<List<Integer>> result, List<Integer> tempList, int[] candidates, int remain, int start)
    {
        if (remain <0)
        return;
        if (remain==0& !result.contains(tempList))
        result.add(new ArrayList<>(tempList));
        for (int i=start; i<candidates.length; i++)
        {
            tempList.add(candidates[i]);
            backtrack(result, tempList, candidates, remain-candidates[i], i+1);
            tempList.remove(tempList.size()-1);
        }
    }
}
