/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void reorderList(ListNode head) {
        if (head == null || head.next == null){
            return;
        }
        ListNode mid = findMiddle(head);
        ListNode head2 = reverse(mid.next);
        mid.next = null;
        merge(head, head2);
    }
    
    public void merge(ListNode head1, ListNode head2){
        int index = 0;
        ListNode dummy = new ListNode(0);
        ListNode node = dummy;
        while (head1 != null && head2 != null){
            if (index % 2 == 0){
                dummy.next = head1;
                head1 = head1.next;
            }else{
                dummy.next = head2;
                head2 = head2.next;
            }
            index ++;
            dummy = dummy.next;
        }
        if (head1 != null){
            dummy.next = head1;
        }
        if (head2 != null){
            dummy.next = head2;
        }
    }
    public ListNode reverse(ListNode head){
        ListNode newHead = null;
        while(head != null){
            //存储下一个node，以便更新head
            ListNode temp = head.next;
            //反转
            head.next = newHead;
            // 设置newHead
            newHead = head;
            //更新head
            head = temp;
        }
        return newHead;
    }
    
    
    public ListNode findMiddle(ListNode head){
        ListNode slow = head;
        ListNode fast = head.next;
        while (fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
}
