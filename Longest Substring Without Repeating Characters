public class Solution {
    public int lengthOfLongestSubstring(String s) {
        // if (s.length() <= 1){
        //     return s.length();
        // }
        // HashMap<Character, Integer> map = new HashMap<Character, Integer>();
        // for (char c : s.toCharArray()){
        //     map.put(c, 0);
        // }
        // int start = 0, end = 0, maxLen = Integer.MIN_VALUE;
        // while (end < s.length()){
        //     char c1 = s.charAt(end);
        //     map.put(c1, map.get(c1) + 1);
        //     // value > 1说明 repeat
        //     if (map.get(c1) > 1){
        //         maxLen = Math.max(maxLen, end - start);
        //         while (start < end){
        //         char c2 = s.charAt(start);
        //         map.put(c2, map.get(c2) - 1);
        //         if (map.get(c2) == 1){
        //             start ++;
        //             break;
        //         }
        //         start ++;
        //         }
        //     }
        //     end ++;
        // }
        // maxLen = Math.max(maxLen, end - start);
        // return maxLen;
        if (s.length() <= 1) return s.length();
        HashMap<Character, Integer> map = new HashMap<Character, Integer>();
        int max = 0;
        for (int i = 0, j = 0; i < s.length(); ++i){
            if (map.containsKey(s.charAt(i))){
                //记得取最大值
                j = Math.max(j, map.get(s.charAt(i)) + 1);
            }
            map.put(s.charAt(i), i);
            max = Math.max(max, i - j + 1);
        }
        return max;
    }
}
