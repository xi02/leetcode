public class Solution {
    public int myAtoi(String str) {
        if (str == null){
            return 0;
        }
        // eliminates leading and trailing spaces
        //整数一般有两点，一个是正负符号问题，另一个是整数越界问题。思路比较简单，就是先去掉多余的空格字符，然后读符号（注意正负号都有可能，也有可能没有符号），接下来按顺序读数字，结束条件有三种情况：（1）异常字符出现（按照C语言的标准是把异常字符起的后面全部截去，保留前面的部分作为结果）；（2）数字越界（返回最接近的整数）；（3）字符串结束。
        str = str.trim();
        if (str.length() == 0) return 0;
        boolean isNeg = false;
        int i = 0;
        if (str.charAt(0) == '-' || str.charAt(0) == '+'){
            i++;
            if (str.charAt(0) == '-')
            isNeg = true;
        }
        int res = 0;
        while (i < str.length()){
            if (str.charAt(i) < '0' || str.charAt(i) > '9')
            break;
            int digit = (int)(str.charAt(i) - '0');
            if (isNeg && res >-((Integer.MIN_VALUE + digit) / 10))
            return Integer.MIN_VALUE;
            else if(!isNeg && res > (Integer.MAX_VALUE - digit) / 10)
            return Integer.MAX_VALUE;
            res = res* 10 + digit;
            i++;
        }
        return isNeg?-res:res;
    }
}
